%{
    #include <iostream>
    #include "part3_helpers.hpp"
    #include <list>
    #include <stdio>
    #include <algorithm>
    using namespace std;

    ParsNode *parseTree; 
    Code code;
    VarsTable varTable;
    FuncTable funcTable;

    extern int yylex();
    void yyerror(const char*);
    void new_err(string err);
    void sem_err(string err);
    extern int yylineno;
    extern const char* yytext;

    

%}

    %token ID
    %token INT
    %token FLOAT
    %token VOID
    %token INTEGERNUM
    %token REALNUM
    %token WRITE
    %token STR
    %token READ
    %token WHILE
    %token DO
    %token IF
    %token RETURN
    %token FULL_WHILE
    %token BREAK
    %precedence THEN
    %precedence ELSE
    
    %right ASSIGN
    %left OR
    %left AND
    %left RELOP
    %left ADDOP
    %left MULOP
    %right NOT
    %left '('
    %left ')'
    %left '{'
    %left '}'
    %left '.'
    %left ';'
    %left ','
    %left ':'

%%

program :   fdefs                         {
                parseTree=new SymNode();
                code.emit("HALT");
            }
;

fdefs : /* epsilon */                   {$$=new SymNode();}
	| fdefs func_api {
                FuncApiNode *func_api = dynamic_cast<FuncApiNode*>($2);
                funcEntry* funcEntry = funcTable.find(func_api->funcProps.id);
                                
                if(funcEntry == nullptr){
                    funcEntry = funcTable.addFunc(func_api->funcProps);
                } else { //found
                    if(!funcEntry->matchFunc(func_api->funcProps))
                        sem_err(string("the API of the definition of function '") + func_api->funcProps.id + "' doesn't match previous declaration");
                    if(funcEntry->isDefined())
                        sem_err(string("duplicate definition of a function '") + func_api->funcProps.id + "'");
                }
                //override args to ensure correct arg naming
                funcEntry->props.args = func_api->funcProps.args;
                funcTable.setCurrent(funcEntry);
                varTable.setAPI(funcEntry->props.args);
                funcEntry->define(code.nextQuad());
        } blk            {
                $$=new SymNode();
                StmtNode *blk = dynamic_cast<StmtNode*>($4);

                if(!blk->breaklist.empty())
                    sem_err("break statement not within loop");

                code.backpatch(blk->nextlist, code.nextQuad());
                code.emit("RETRN"); //fallback, for when not defined
        }
        | fdefs func_api ';'            {
                $$=new SymNode();
                FuncApiNode *func_api = dynamic_cast<FuncApiNode*>($2);

                funcEntry* funcEntry = funcTable.find(func_api->funcProps.id);
                if(funcEntry == nullptr){
                    funcTable.addFunc(func_api->funcProps);
                } else { //found
                    if(!funcEntry->matchFunc(func_api->funcProps)){
                        sem_err(string("duplicate declaration of function '") + func_api->funcProps.id + "' with different API");
                    } 
                }
        }
;

func_api : type ID '(' func_args ')'    {
                $$ = new FuncApiNode();
                FuncApiNode* func_api = dynamic_cast<FuncApiNode*>($$);
                TypeNode *type = dynamic_cast<TypeNode*>($1);
                TokenNode *id = dynamic_cast<TokenNode*>($2);
                ArgLstNode *func_args = dynamic_cast<ArgLstNode*>($4);

                funcProps funcProps = {
                    type->typeVal,
                    id->value,
                    func_args->argList
                };
                func_api->funcProps = funcProps;
            } 
;

func_args : func_arglist                {
                $$=new ArgLstNode();
                ArgLstNode *func_args = dynamic_cast<ArgLstNode*>($$);
                ArgLstNode *func_arglist = dynamic_cast<ArgLstNode*>($1);

                func_args->argList = func_arglist->argList;
            }       
            | /* epsilon */             {$$=new ArgLstNode();}
;

func_arglist :  func_arglist ',' dcl    {
                $$=new ArgLstNode();
                ArgLstNode *func_arglist = dynamic_cast<ArgLstNode*>($$);
                ArgLstNode *func_arglist1 = dynamic_cast<ArgLstNode*>($1);
                DeclarNode *dcl = dynamic_cast<DeclarNode*>($3);

                func_arglist->argList = func_arglist1->argList;
                for(string id : dcl->idList) {
                    //check duplicate arg names
                    for(ArgDeclr argIt : func_arglist->argList){
                        if(argIt.id == id)
                            sem_err(string("argument ") + id + " was already declared in the function header");
                    }
                    ArgDeclr arg = {id, dcl->idType};
                    func_arglist->argList.push_back(arg);
                }
        } 
        | dcl                   {
                $$=new ArgLstNode();
                ArgLstNode *func_arglist = dynamic_cast<ArgLstNode*>($$);
                DeclarNode *dcl = dynamic_cast<DeclarNode*>($1);

                for(string id : dcl->idList){
                    ArgDeclr arg= {id, dcl->idType};
                    func_arglist->argList.push_back(arg);
                }
        }
;

blk : '{'                             { 
            varTable.push();
            if(varTable.argsList.size() > 0){
                for(ArgDeclr arg : varTable.argsList){ //Place function args are in the first scope
                    varTable.front().newReg(arg.id, arg.type);
                }
                varTable.argsList.clear();
            }
        } stlist '}'                    {
            $$=new StmtNode();
            StmtNode *blk = dynamic_cast<StmtNode*>($$);
            StmtNode *stlist = dynamic_cast<StmtNode*>($3);
            blk->nextlist = stlist->nextlist;
            blk->breaklist = stlist->breaklist;
            varTable.pop();
        } 
;

dcl :   ID ':' type                     {
                $$=new DeclarNode();
                DeclarNode *dcl = dynamic_cast<DeclarNode*>($$);
                TokenNode *id = dynamic_cast<TokenNode*>($1);
                TypeNode *type = dynamic_cast<TypeNode*>($3);

                if(type->typeVal == VOID_t)
                        sem_err("can't decalre variable of type 'void'");
                
                dcl->idType = type->typeVal;
                dcl->idList.push_front(id->value);
                }
        | ID ',' dcl                    {
                $$=new DeclarNode();
                DeclarNode *dcl = dynamic_cast<DeclarNode*>($$);
                TokenNode *id = dynamic_cast<TokenNode*>($1);
                DeclarNode *dcl1 = dynamic_cast<DeclarNode*>($3);

                //Check if previously decalred same name
                if (std::find(std::begin(dcl1->idList), std::end(dcl1->idList), id->value) != std::end(dcl1->idList))
                    sem_err(string("already declared variable with name '") + id->value + "'");

                dcl->idType = dcl1->idType;
                dcl->idList = dcl1->idList;
                dcl->idList.push_front(id->value);
        }
;

type :  INT                             {
                $$=new TypeNode();
                ((TypeNode*)$$)->typeVal = INT_t;
        }
        | FLOAT                         {
                $$=new TypeNode();
                ((TypeNode*)$$)->typeVal = FLOAT_t;
        }
        | VOID                          {
                $$=new TypeNode();
                ((TypeNode*)$$)->typeVal = VOID_t;
        }
;

stlist : stlist M stmt                    {
                $$=new StmtNode();
                StmtNode *stlist=dynamic_cast<StmtNode*>($$);
                StmtNode *stlist1=dynamic_cast<StmtNode*>($1);
                MMarkNode *M=dynamic_cast<MMarkNode*>($2);
                StmtNode *stmt=dynamic_cast<StmtNode*>($3);

                code.backpatch(stlist1->nextlist, M->quad);
                stlist->nextlist.merge(stmt->nextlist);
                stlist->breaklist.merge(stmt->breaklist);
                stlist->breaklist.merge(stlist1->breaklist);
        }
         |/* epsilon */                 {
		$$=new StmtNode();
}
;

stmt :  dcl ';'                         {
                $$=new StmtNode();
                DeclarNode *dcl = dynamic_cast<DeclarNode*>($1);

                for(string id : dcl->idList){
                    // variable can't be declared twice in the same block
                    if(varTable.isInScope(id))
                        sem_err(string("variable '") + id + "' was already declared within the same block");
                    varTable.front().newReg(id, dcl->idType);
                }
                code.emit("ADD2I",SP,SP,to_string(dcl->idList.size() * VAR_SIZE));
        }
        | assn                          {$$=new StmtNode();}
        | exp ';'                       {$$=new StmtNode();}
        | cntrl                         {
                $$=new StmtNode();
                StmtNode *stmt = dynamic_cast<StmtNode*>($$);
                StmtNode *cntrl = dynamic_cast<StmtNode*>($1); 

                stmt->nextlist = cntrl->nextlist;
                stmt->breaklist = cntrl->breaklist;
        }
        | read                          {$$=new StmtNode();}
        | write                         {$$=new StmtNode();}
        | return                        {$$=new StmtNode();}
        | blk                           {
                $$=new StmtNode();
                StmtNode *stmt = dynamic_cast<StmtNode*>($$);
                StmtNode *blk = dynamic_cast<StmtNode*>($1);

                stmt->nextlist = blk->nextlist;
                stmt->breaklist = blk->breaklist;
                
        }
        | BREAK ';'                     {
                $$=new StmtNode();
                StmtNode *stmt = dynamic_cast<StmtNode*>($$);

                stmt->breaklist.push_back(code.nextQuad());
                code.emit("UJUMP -1");
        }
;

return : RETURN exp ';'                 {
            $$=new SymNode();
            ExpNode *exp = dynamic_cast<ExpNode*>($2);
            
            //check return type matches function's return type
            idTypes currentFuncType = funcTable.getCurrent()->props.type;
            if(currentFuncType != exp->exp)
                sem_err(string("return value of type ") + idTypesNames[exp->exp] + ", expected type " + idTypesNames[currentFuncType]);

            //todo maybe we should remove this check, not sure if should be allowed
            if(exp->exp == VOID_t)
                sem_err("return value type can't be void");

            //Store return value in "return register"
            if(exp->exp == INT_t)
                code.emit("COPYI", RI, exp->place);
            else if(exp->exp == FLOAT_t)
                code.emit("COPYF", RF, exp->place);

            code.emit("RETRN");
        }
        | RETURN ';'                    {
            $$=new SymNode();

            if(funcTable.getCurrent()->props.type != VOID_t)
                sem_err("expected return with an expression");

            code.emit("RETRN");
        }
;

write : WRITE '(' exp ')' ';'           {
                $$=new SymNode();

                ExpNode *exp = dynamic_cast<ExpNode*>($3);
                
                if(exp->exp == VOID_t)
                        sem_err("can't assign/read void expressions");
                if(exp->exp == INT_t)
                    code.emit("PRNTI", exp->place);
                else if(exp->exp == FLOAT_t)
                    code.emit("PRNTF", exp->place);
                
                } 
        | WRITE '(' STR ')' ';'         {
                $$=new SymNode();

                TokenNode *strToken = dynamic_cast<TokenNode*>($3);

                string str = strToken->value;
                for(int i=0; i<str.length();i++){
                    if(str[i] == '\\'){
                        i++;
                        switch(str[i]){
                            case 'n':
                                code.emit("PRNTC 10");
                                break;
                            case 't':
                                code.emit("PRNTC 9");
                                break;
                            case '"':
                                code.emit("PRNTC 34");
                                break;
                            default:
                                new_err("Unknown char after \\");
                        }
                    } else {
                        code.emit("PRNTC", to_string(int(str[i])));
                    }
                }
        } 
;

read : READ '(' lval ')' ';'            {
                $$=new SymNode();
                SymNode *read = dynamic_cast<SymNode*>($$);
                ExpNode *lval = dynamic_cast<ExpNode*>($3);
                
                // lval can't be void - it's guarrnteed at this point
                string type = (lval->exp == INT_t) ? "I" : "F";
                string temp = varTable.front().tempReg(lval->exp);
                code.emit(string("READ")+type, temp);
                code.emit(string("STOR")+type, temp, lval->place, "0");
        } 
;

assn : lval ASSIGN exp ';'              {
                $$=new StmtNode();
                StmtNode *assn = dynamic_cast<StmtNode*>($$);
                ExpNode *lval = dynamic_cast<ExpNode*>($1);
                ExpNode *exp1 = dynamic_cast<ExpNode*>($3);

                if(lval->exp != exp1->exp)
                        sem_err(string("can't assign type ") + idTypesNames[exp1->exp] + " into type " + idTypesNames[lval->exp]);
                // lval can't be void - it's guarrnteed at this point
                string type = (lval->exp == INT_t) ? "I" : "F";

                code.emit(string("STOR")+type, exp1->place, lval->place, "0");
        } 
;

lval : ID                               {
                $$ = new ExpNode();
                ExpNode *lval = dynamic_cast<ExpNode*>($$);
                TokenNode *id = dynamic_cast<TokenNode*>($1);
                
                // search ID in the symbol table (must have been declared)
                VarEntry idEntry;
                bool found = varTable.searchAllTables(idEntry, id->value);
                if(!found)
                    sem_err(string("name ") + id->value + " is undeclared");
                
                string intAddress = varTable.front().tempReg(INT_t);
                code.emit("ADD2I",intAddress, DI, to_string(idEntry.offset));

                lval->exp = idEntry.type;
                lval->place = intAddress;

                if(idEntry.type == FLOAT_t){
                    string floatAddress = varTable.front().tempReg(FLOAT_t);
                    code.emit("CITOF",floatAddress,intAddress);
                    lval->place = floatAddress;
                }
        }
;       

fullwhile : FULL_WHILE N M bexp DO M stmt {
                $$ = new BranchExpNode();
                BranchExpNode *fullwhile = dynamic_cast<BranchExpNode*>($$);
                NMarkNode *N = dynamic_cast<NMarkNode*>($2);
                MMarkNode *M1 = dynamic_cast<MMarkNode*>($3);
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($4);
                MMarkNode *M2 = dynamic_cast<MMarkNode*>($6);
                StmtNode *stmt = dynamic_cast<StmtNode*>($7);

                code.emit("UJUMP", to_string(M1->quad));
                code.backpatch(N->nextlist,code.nextQuad());
                string res = varTable.front().tempReg(INT_t);
                code.emit("COPYI", res , "0"); 
                code.emit("UJUMP", to_string(M1->quad));
                code.backpatch(bexp->truelist,code.nextQuad());
                code.emit("COPYI", res , "1"); 
                code.emit("UJUMP", to_string(M2->quad));
                code.backpatch(bexp->falselist,code.nextQuad());
                fullwhile->falselist = CodeList(code.nextQuad());
                fullwhile->falselist.merge(stmt->breaklist);
                code.emit("BREQZ", res , "-1"); 
                fullwhile->truelist = CodeList(code.nextQuad());
                code.emit("UJUMP -1");
                code.backpatch(stmt->nextlist,M1->quad);
        } 
;

cntrl : IF bexp THEN M stmt ELSE N M stmt     {
                $$ = new StmtNode();
                StmtNode *cntrl = dynamic_cast<StmtNode*>($$);
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($2);
                MMarkNode *M1 = dynamic_cast<MMarkNode*>($4);
                StmtNode *stmt1 = dynamic_cast<StmtNode*>($5);
                NMarkNode *N = dynamic_cast<NMarkNode*>($7);
                MMarkNode *M2 = dynamic_cast<MMarkNode*>($8);
                StmtNode *stmt2 = dynamic_cast<StmtNode*>($9);
                
                code.backpatch(bexp->truelist, M1->quad);
                code.backpatch(bexp->falselist, M2->quad);
                cntrl->nextlist.merge(N->nextlist);
                cntrl->nextlist.merge(stmt1->nextlist);
                cntrl->nextlist.merge(stmt2->nextlist);
                cntrl->breaklist.merge(stmt1->breaklist);
                cntrl->breaklist.merge(stmt2->breaklist);
                
        } 
        | IF bexp THEN M stmt             {
                $$ = new StmtNode();
                StmtNode *cntrl = dynamic_cast<StmtNode*>($$);
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($2);
                MMarkNode *M = dynamic_cast<MMarkNode*>($4);
                StmtNode *stmt = dynamic_cast<StmtNode*>($5);
                
                code.backpatch(bexp->truelist, M->quad);
                cntrl->nextlist.merge(bexp->falselist);
                cntrl->nextlist.merge(stmt->nextlist);
                cntrl->breaklist.merge(stmt->breaklist);
        
        } 
        | WHILE M bexp DO M stmt            {
                $$ = new StmtNode();
                StmtNode *cntrl = dynamic_cast<StmtNode*>($$);
                MMarkNode *M1 = dynamic_cast<MMarkNode*>($2);
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($3);
                MMarkNode *M2 = dynamic_cast<MMarkNode*>($5);
                StmtNode *stmt = dynamic_cast<StmtNode*>($6);

                code.backpatch(bexp->truelist,M2->quad);
                code.backpatch(stmt->nextlist,M1->quad);
                cntrl->nextlist.merge(bexp->falselist);
                cntrl->nextlist.merge(stmt->breaklist);
                code.emit("UJUMP", to_string(M1->quad)); //support "fall through" from stmt
        } 
        | fullwhile                     {
                $$ = new StmtNode();
                StmtNode *cntrl = dynamic_cast<StmtNode*>($$);
                BranchExpNode *fullwhile = dynamic_cast<BranchExpNode*>($1);
                
                // fullwhile has truelist & falselist that in a case of cntrl statement both points on the same "goto line"  
                cntrl->nextlist.merge(fullwhile->truelist);
                cntrl->nextlist.merge(fullwhile->falselist);
        }
;

bexp :  bexp OR M bexp                  {
                $$ = new BranchExpNode();
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($$);
                BranchExpNode *bexp1 = dynamic_cast<BranchExpNode*>($1);
                MMarkNode *M = dynamic_cast<MMarkNode*>($3);
                BranchExpNode *bexp2 = dynamic_cast<BranchExpNode*>($4);
                
                code.backpatch(bexp1->falselist, M->quad);
                bexp->truelist.merge(bexp1->truelist);
                bexp->truelist.merge(bexp2->truelist);
                bexp->falselist.merge(bexp2->falselist);
        }
        | bexp AND M bexp               {
                $$ = new BranchExpNode();
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($$);
                BranchExpNode *bexp1 = dynamic_cast<BranchExpNode*>($1);
                MMarkNode *M = dynamic_cast<MMarkNode*>($3);
                BranchExpNode *bexp2 = dynamic_cast<BranchExpNode*>($4);
                
                code.backpatch(bexp1->truelist,M->quad);
                bexp->truelist.merge(bexp2->truelist);
                bexp->falselist.merge(bexp1->falselist);
                bexp->falselist.merge(bexp2->falselist);
        }
        | NOT bexp                      {
                $$ = new BranchExpNode();
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($$);
                BranchExpNode *bexp1 = dynamic_cast<BranchExpNode*>($2);

                bexp->falselist.merge(bexp1->truelist);
                bexp->truelist.merge(bexp1->falselist);
        }
        | exp RELOP exp                 {
                $$ = new BranchExpNode();
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($$);        
                ExpNode *exp1 = dynamic_cast<ExpNode*>($1);
                TokenNode *relop = dynamic_cast<TokenNode*>($2);
                ExpNode *exp2 = dynamic_cast<ExpNode*>($3);

                if(exp1->exp != exp2->exp)
                        sem_err(string("can't compare type ") + idTypesNames[exp1->exp] + " with type " + idTypesNames[exp2->exp]);
                if(exp1->exp == VOID_t)
                        sem_err("can't compare void expressions");
                string type = (exp1->exp == INT_t) ? "I" : "F"; 
                
                // calculate RELOP
                string resInt = varTable.front().tempReg(INT_t);
                switch (RelopHit(relop->value)){
                case Eq:
                        if(exp1->exp == FLOAT_t){
                            string resFloat = varTable.front().tempReg(FLOAT_t);
                            code.emit("SEQUF", resFloat, exp1->place, exp2->place);
                            code.emit("CFTOI", resInt, resFloat);
                        } else {
                            code.emit("SEQUI", resInt, exp1->place, exp2->place);
                        }
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BNEQZ", resInt, "-1"); //expressions equal --> res=1 
                        break;
                case Neq:
                        if(exp1->exp == FLOAT_t){
                            string resFloat = varTable.front().tempReg(FLOAT_t);
                            code.emit("SNEQF", resFloat, exp1->place, exp2->place);
                            code.emit("CFTOI", resInt, resFloat);
                        } else {
                            code.emit("SNEQI", resInt, exp1->place, exp2->place);
                        }                       
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BNEQZ", resInt, "-1");
                        break;
                case Lt:
                        if(exp1->exp == FLOAT_t){
                            string resFloat = varTable.front().tempReg(FLOAT_t);
                            code.emit("SLETF", resFloat, exp1->place, exp2->place);
                            code.emit("CFTOI", resInt, resFloat);
                        } else {
                            code.emit("SLETI", resInt, exp1->place, exp2->place);
                        }
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BNEQZ", resInt, "-1");
                        break;
                case LtEq:
                        if(exp1->exp == FLOAT_t){
                            string resFloat = varTable.front().tempReg(FLOAT_t);
                            code.emit("SGRTF", resFloat, exp1->place, exp2->place);
                            code.emit("CFTOI", resInt, resFloat);
                        } else {
                            code.emit("SGRTI", resInt, exp1->place, exp2->place);
                        }
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BREQZ", resInt, "-1"); //exp1 <= exp2 --> res=0
                        break;
                case Gt:
                        if(exp1->exp == FLOAT_t){
                            string resFloat = varTable.front().tempReg(FLOAT_t);
                            code.emit("SGRTF", resFloat, exp1->place, exp2->place);
                            code.emit("CFTOI", resInt, resFloat);
                        } else {
                            code.emit("SGRTI", resInt, exp1->place, exp2->place);
                        }
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BNEQZ", resInt, "-1");
                        break;
                case GtEq:
                        if(exp1->exp == FLOAT_t){
                            string resFloat = varTable.front().tempReg(FLOAT_t);
                            code.emit("SLETF", resFloat, exp1->place, exp2->place);
                            code.emit("CFTOI", resInt, resFloat);
                        } else {
                            code.emit("SLETI", resInt, exp1->place, exp2->place);
                        }
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BREQZ", resInt, "-1"); //exp1 >= exp2 --> res=0
                        break;
                default:
                        new_err("can't find RELOP match");
                        break;
                }       

                bexp->falselist.push_back(code.nextQuad());
                code.emit("UJUMP -1");
                
        }
        | '(' bexp ')'                  {
                $$ = new BranchExpNode();
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($$);        
                BranchExpNode *bexp1 = dynamic_cast<BranchExpNode*>($2);

                bexp->truelist = bexp1->truelist;        
                bexp->falselist = bexp1->falselist;        
        }
        | fullwhile                     {
                $$ = new BranchExpNode();
                BranchExpNode *fullwhile = dynamic_cast<BranchExpNode*>($1);
                BranchExpNode *bexp = dynamic_cast<BranchExpNode*>($$);        

                bexp->truelist = fullwhile->truelist;        
                bexp->falselist = fullwhile->falselist;        
        }
;

exp :   exp ADDOP exp 	                {
                $$=new ExpNode();
                ExpNode *exp = dynamic_cast<ExpNode*>($$);
                ExpNode *exp1 = dynamic_cast<ExpNode*>($1);
                TokenNode *addop = dynamic_cast<TokenNode*>($2);
                ExpNode *exp2 = dynamic_cast<ExpNode*>($3);

                if(exp1->exp != exp2->exp)
                        sem_err(string("can't add type ") + idTypesNames[exp1->exp] + " with type " + idTypesNames[exp2->exp]);
                if(exp1->exp == VOID_t)
                        sem_err("addition operation can't be done with 'void'");
                
                string type = (exp1->exp == INT_t) ? "I" : "F";
                // calculate ADDOP
                string res = varTable.front().tempReg(exp1->exp);
                switch (ArithHit(addop->value)){
                case Add:
                        code.emit(string("ADD2")+type, res, exp1->place, exp2->place);
                        break;
                case Sub:
                        code.emit(string("SUBT")+type, res, exp1->place, exp2->place);
                        break;
                default:
                        new_err("can't find ADDOP match");
                        break;
                }

                exp->exp = exp1->exp;
                exp->place = res;
        }
        | exp MULOP exp                 {
                $$=new ExpNode();
                ExpNode *exp = dynamic_cast<ExpNode*>($$);
                ExpNode *exp1 = dynamic_cast<ExpNode*>($1);
                TokenNode *mulop = dynamic_cast<TokenNode*>($2);
                ExpNode *exp2 = dynamic_cast<ExpNode*>($3);

                if(exp1->exp != exp2->exp)
                        sem_err(string("can't multiply type ") + idTypesNames[exp1->exp] + " with type " + idTypesNames[exp2->exp]);
                if(exp1->exp == VOID_t)
                        sem_err("multiply operation can't be done with 'void'");
                
                string type = (exp1->exp == INT_t) ? "I" : "F";
                // calculate MULOP
                string res = varTable.front().tempReg(exp1->exp);
                switch (ArithHit(mulop->value)){
                case Mul:
                        code.emit(string("MULT")+type, res, exp1->place, exp2->place);
                        break;
                case Div:
                        code.emit(string("DIVD")+type, res, exp1->place, exp2->place);
                        break;
                default:
                        new_err("can't find ADDOP match");
                        break;
                }

                exp->exp = exp1->exp;
                exp->place = res;
        }
        | '(' exp ')'                   {
            $$=new ExpNode();
            ExpNode *exp = dynamic_cast<ExpNode*>($$);
            ExpNode *exp1 = dynamic_cast<ExpNode*>($2);

            exp->place = exp1->place;
            exp->exp = exp1->exp;
        }
        | '(' type ')' exp              {
            $$=new ExpNode();
            ExpNode *exp = dynamic_cast<ExpNode*>($$);
            TypeNode *type = dynamic_cast<TypeNode*>($2);
            ExpNode *exp1 = dynamic_cast<ExpNode*>($4);

            if(type->typeVal == exp1->exp){
                //No cast needed
                exp->place = exp1->place;
                exp->exp = exp1->exp;
            } else {
                if(type->typeVal == VOID_t || exp1->exp == VOID_t)
                    sem_err(string("can't cast ") + idTypesNames[exp1->exp] + " to " + idTypesNames[type->typeVal]);
                exp->exp = type->typeVal;
                if(type->typeVal == INT_t){
                    exp->place = varTable.front().tempReg(INT_t);
                    code.emit("CFTOI", exp->place, exp1->place);
                } else { //FLOAT_t
                    exp->place = varTable.front().tempReg(FLOAT_t);
                    code.emit("CITOF", exp->place, exp1->place);
                }
            }

        }
        | ID                            {
                $$=new ExpNode();
                ExpNode *exp = dynamic_cast<ExpNode*>($$);
                TokenNode *id = dynamic_cast<TokenNode*>($1); 
                
                VarEntry idEntry;
                bool found = varTable.searchAllTables(idEntry, id->value);
                if(!found)
                    sem_err(string("tried evaluating undeclared variable '") + id->value + "'");

                string temp = varTable.front().tempReg(idEntry.type);

                if(idEntry.type == FLOAT_t){
                    code.emit("CITOF", DF, DI);
                    code.emit("LOADF", temp, DF, to_string(idEntry.offset));
                } else {
                    code.emit("LOADI", temp, DI, to_string(idEntry.offset));
                }
                //debug
                //code.emit("PRNTI", DI);
                //cout << "new temp " << temp << " for id " << id->value << endl;

                exp->exp = idEntry.type;
                exp->place = temp;
        }
        | num                           {
                $$=new ExpNode();
                ExpNode *exp = dynamic_cast<ExpNode*>($$);
                ExpNode *num = dynamic_cast<ExpNode*>($1);

                exp->place = num->place;
                exp->exp = num->exp;
        }
        | call                          {
                $$=new ExpNode();
                ExpNode *exp = dynamic_cast<ExpNode*>($$);
                ExpNode *call = dynamic_cast<ExpNode*>($1);

                exp->place = call->place;
                exp->exp = call->exp;
        }
;

num :   INTEGERNUM                      {
                $$=new ExpNode();
                ExpNode *num = dynamic_cast<ExpNode*>($$);
                TokenNode *integer = dynamic_cast<TokenNode*>($1);

                num->place = varTable.front().tempReg(INT_t);
                num->exp = INT_t;
                code.emit("COPYI", num->place , integer->value); 
        }
        | REALNUM                       {
                $$=new ExpNode();
                ExpNode *num = dynamic_cast<ExpNode*>($$);
                TokenNode *real = dynamic_cast<TokenNode*>($1);

                num->place = varTable.front().tempReg(FLOAT_t);
                num->exp = FLOAT_t;
                code.emit("COPYF", num->place , real->value); 
        }
;

call : ID '(' call_args ')'             {
        $$=new ExpNode();
        ExpNode *call = dynamic_cast<ExpNode*>($$);
        TokenNode *id = dynamic_cast<TokenNode*>($1);
        CallArgsNode *call_args = dynamic_cast<CallArgsNode*>($3);

        funcEntry* funcEntry = funcTable.find(id->value);
        if(funcEntry == nullptr)
            sem_err(string("called an undeclared function '") + id->value + "'");
        if(call_args->expList.size() != funcEntry->props.args.size())
            sem_err(string("wrong number of arguments passed to function '") + id->value +"'");

        varTable.storeIds(); //for each var: Mem[SP++] = var
        code.emit("STORI", RA, SP, "0"); //Mem[SP] = RA
        code.emit("STORI", DI, SP, "4"); //Mem[SP+1*4] = DI
        code.emit("STORI", FP, SP, "8"); //Mem[SP+2*4] = FP

        code.emit("ADD2I", FP, SP, "8");
        //store arguments
        int i = FUNC_ARGS_OFFSET;
        auto argIt = funcEntry->props.args.begin();
        auto expArg = call_args->expList.begin();

        //Cast FP to FP_F
        code.emit("CITOF",FP_F, FP);

        for(;argIt != funcEntry->props.args.end();i++, argIt++, expArg++){
            if(expArg->exp != argIt->type)
                sem_err(string("wrong type of argument passed to function '") + id->value + "'");

            if(argIt->type == INT_t){
                code.emit(string("STORI"), expArg->place, FP, to_string(i * VAR_SIZE));
            } else if (argIt->type == FLOAT_t){
                code.emit(string("STORF"), expArg->place, FP_F, to_string(i * VAR_SIZE));
            } else {
                new_err("Passed function a void arg");
            }

        }
        //set DI on the first arg
        code.emit("ADD2I", DI, FP, to_string(FUNC_ARGS_OFFSET*VAR_SIZE));
        //set SP above arguments
        code.emit("ADD2I", SP, FP, 
            to_string(((funcEntry->props.args.size()+FUNC_ARGS_OFFSET)* VAR_SIZE)));
        //jump
        string L = funcEntry->getPlace(code.nextQuad());
        code.emit("JLINK", L);
        
        //return from callee
        
        //restore SP, FP
        code.emit("COPYI", SP, FP); //SP = FP
        code.emit("LOADI", FP, FP, "0"); //FP = Mem[FP+0]
        code.emit("SUBTI", SP, SP, "8"); //SP-=2*4
        code.emit("LOADI", DI, SP, "4"); //DI = Mem[SP+1*4]
        code.emit("LOADI", RA, SP, "0"); //RA = Mem[SP]
        varTable.loadIds();  //for each var: var = Mem[--SP]
        

        call->exp = funcEntry->props.type;
        //store the return value, non-void return value
        if(funcEntry->props.type == INT_t){
                call->place = varTable.front().tempReg(INT_t);
                code.emit("COPYI", call->place, RI);
        } else if(funcEntry->props.type == FLOAT_t){
                call->place = varTable.front().tempReg(FLOAT_t);
                code.emit("COPYF", call->place, RF);
        }
}
;

call_args : call_arglist                {
                $$=new CallArgsNode();
                CallArgsNode *call_args = dynamic_cast<CallArgsNode*>($$);
                CallArgsNode *call_arglist = dynamic_cast<CallArgsNode*>($1);

                call_args->expList = call_arglist->expList;
            }
            |/* epsilon */              {$$=new CallArgsNode();} 
;

call_arglist :  call_arglist ',' exp    {
                $$=new CallArgsNode();
                CallArgsNode *call_arglist = dynamic_cast<CallArgsNode*>($$);
                CallArgsNode *call_arglist1 = dynamic_cast<CallArgsNode*>($1);
                ExpNode *exp = dynamic_cast<ExpNode*>($3);
                
                if(exp->exp == VOID_t)
                    sem_err("can't pass argument of type 'void' to a function");
                call_arglist->expList = call_arglist1->expList;
                call_arglist->expList.push_back(*exp);
        }
        | exp                           {
                $$=new CallArgsNode();
                CallArgsNode *call_arglist = dynamic_cast<CallArgsNode*>($$);
                ExpNode *exp = dynamic_cast<ExpNode*>($1);

                if(exp->exp == VOID_t)
                    sem_err("can't pass argument of type 'void' to a function");
                call_arglist->expList.push_back(*exp);
        }
;

M : /*epsilon*/                         {
        MMarkNode *M = new MMarkNode();
        M->quad = code.nextQuad();
        $$=M;
}
;

N : /*epsilon*/                         {
        NMarkNode *N = new NMarkNode();
        N->nextlist.push_back(code.nextQuad());
        code.emit("UJUMP -1");
        $$=N;
}
;

%%

void new_err(string err){
    cerr << err << endl;
    exit(10);
}

void sem_err(string err){
    cerr << "Semantic error: " << err << " in line number " << yylineno <<endl;
    exit(3);
}

void yyerror(const char*) {
    cerr << "Syntax error: '" << yytext << "' in line number " << yylineno << endl;
    exit(2);
}
